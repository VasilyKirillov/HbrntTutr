
package repositories;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.sql.DataSource;
import model.Address;

/**
 *
 * @author Vasilii_Kirillov
 */
public class AddressRepository {

    private final DataSource ds;
    
    public AddressRepository() {
        try{
            Context ctx = new InitialContext();
            try{
                ds = (DataSource) ctx.lookup("java:comp/env/jdbc/trainingdb");
                
            } finally {
                ctx.close();
            }
        } catch(NamingException e) {
            throw new RuntimeException(e);
        }
    }
    
    public void init() throws SQLException {
        Connection conn = ds.getConnection();
        try {
            Statement stmt = conn.createStatement();
            try {
                stmt.execute("CREATE TABLE address (id INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 100, INCREMENT BY 1) PRIMARY KEY,, street VARCHAR(50), city VARCHAR(30), state VARCHAR(30), zip VARCHAR(10))");
            } finally {
                stmt.close();
            }            
        } finally {
            conn.close(); 
        }     
    }
    
    public Address find(long id) throws SQLException{
        Connection conn = ds.getConnection();
        try {
            Statement stmt = conn.createStatement();
            try {
                ResultSet results = stmt.executeQuery("SELECT * FROM address where id = " + id);
                try{
                    if(!results.next()){
                        return null;
                    } else {
                        return unmarshall(results);
                    }
                } finally {
                    results.close();
                }
            } finally {
                stmt.close();
            }            
        } finally {
            conn.close(); 
        } 
    }
    
    public void create(Address address){
        
    }
    
     public void update(Address address){
        
    }
    
     
    public void delete(Address address){
        
    }

    private Address unmarshall(ResultSet results) throws SQLException{
        Address address = new Address();
        address.setId(results.getLong("id"));
        address.setStreet(results.getString("street"));
        address.setCity(results.getString("city"));
        address.setState(results.getString("state"));
        address.setZip(results.getString("zip"));
        return address;
    }      
    
}
